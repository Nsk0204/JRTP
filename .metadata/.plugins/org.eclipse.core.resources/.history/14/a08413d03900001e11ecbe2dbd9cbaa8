package in.cybage.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Random;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;

import in.cybage.bindings.ActivateAccount;
import in.cybage.bindings.Login;
import in.cybage.bindings.User;
import in.cybage.entity.UserMaster;
import in.cybage.repo.UserMasterRepo;

public class UserMgmtServiceImpl implements UserMgmtService {

	@Autowired
	private UserMasterRepo userMasterRepo;

	@Override
	public boolean saveuser(User user) {

		UserMaster entity = new UserMaster();
		BeanUtils.copyProperties(user, entity);

		entity.setPassword(generateRandomPwd());
		entity.setAccStatus("In-Active");

		UserMaster save = userMasterRepo.save(entity);

		// TODO: Send regisration email

		return save.getUserId() != null;
	}

	@Override
	public boolean activateuserAcc(ActivateAccount activateAcc) {
		UserMaster user = new UserMaster();
		user.setEmail(activateAcc.getEmail());
		user.setPassword(activateAcc.getTempPwd());
		Example<UserMaster> of = Example.of(user);

		List<UserMaster> findAll = userMasterRepo.findAll(of);
		if (findAll.isEmpty()) {
			return false;
		} else {
			UserMaster userMaster = findAll.get(0);
			userMaster.setPassword(activateAcc.getNewPwd());
			userMaster.setAccStatus("Active");
			userMasterRepo.save(userMaster);
			return true;
		}
	}

	@Override
	public List<User> getAllUsers() {
		List<UserMaster> entities = userMasterRepo.findAll();
		List<User> users = new ArrayList<>();
		for (UserMaster entity : entities) {
			User user = new User();
			BeanUtils.copyProperties(entity, user);
			users.add(user);
		}
		return users;
	}

	@Override
	public User getUserById(Integer userId) {
		Optional<UserMaster> findById = userMasterRepo.findById(userId);
		if (findById.isPresent()) {
			UserMaster userMaster = findById.get();
			User user = new User();
			BeanUtils.copyProperties(userMaster, user);
			return user;
		}
		return null;
	}

	@Override
	public boolean deleteUserById(Integer userId) {
		try {
			userMasterRepo.deleteById(userId);
			return true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	@Override
	public boolean changesStatus(Integer userId, String accStatus) {
		Optional<UserMaster> findById = userMasterRepo.findById(userId);
		if (findById.isPresent()) {
			UserMaster userMaster = findById.get();
			userMaster.setAccStatus(accStatus);
			userMasterRepo.save(userMaster);
			return true;
		}
		return false;
	}

	@Override
	public String login(Login login) {
		UserMaster userMaster = new UserMaster();
		userMaster.setEmail(login.getEmail());
		userMaster.setPassword(login.getPassword());
		
		Example<UserMaster> of = Example.of(userMaster);
List<UserMaster> findAll = userMasterRepo.findAll(of);
if(findAll.isEmpty()) {
		return "Invalid credentials";
	}else
	{
		UserMaster userMaster2 = findAll.get(0);
		if(userMaster2.getAccStatus().equals("Active")) {
			return "Success";
		}
	}

	}

	@Override
	public String forgotPwd(String email) {
		// TODO Auto-generated method stub
		return null;
	}

	private String generateRandomPwd() {

		String CHAR_LOWERCASE = "abcdefghijklmnopqrstuvwxyz";
		String CHAR_UPPERCASE = CHAR_LOWERCASE.toUpperCase();
		String DIGIT = "0123456789";
		int PASSWORD_LENGTH = 20;

		String alphaNumeric = CHAR_LOWERCASE + CHAR_UPPERCASE + DIGIT;

		StringBuilder sb = new StringBuilder();
		Random result = new Random();
		for (int i = 0; i < PASSWORD_LENGTH; i++) {
			// produce a random order
			int index = result.nextInt(alphaNumeric.length());
			sb.append(alphaNumeric.charAt(index));
		}
		return result.toString();
	}
}
