package in.cybage.rest;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import in.cybage.bindings.ActivateAccount;
import in.cybage.bindings.Login;
import in.cybage.bindings.User;
import in.cybage.service.UserMgmtService;

@RestController
public class UserRestController {

	@Autowired
	private UserMgmtService userService;

	@PostMapping("/user")
	public ResponseEntity<String> userReg(User user) {
		boolean saveuser = userService.saveuser(user);
		if (saveuser)
			return new ResponseEntity<>("Registration Success", HttpStatus.CREATED);
		else
			return new ResponseEntity<>("Registration Failed", HttpStatus.INTERNAL_SERVER_ERROR);
	}

	@PostMapping("/activate")
	public ResponseEntity<String> ActivateAcc(@RequestBody ActivateAccount activateAcc) {
		boolean isActivated = userService.activateuserAcc(activateAcc);
		if (isActivated)
			return new ResponseEntity<>("Account activated", HttpStatus.OK);
		else
			return new ResponseEntity<>("Invalid Temporary password", HttpStatus.BAD_REQUEST);
	}

	@GetMapping("/users")
	public ResponseEntity<List<User>> findAllUser() {
		List<User> allUsers = userService.getAllUsers();
		return new ResponseEntity<>(allUsers, HttpStatus.OK);
	}

	@GetMapping("/user/{userId}")
	public ResponseEntity<User> getUSerById(@PathVariable Integer userId) {
		User userById = userService.getUserById(userId);
		return new ResponseEntity<>(userById, HttpStatus.OK);
	}

	@DeleteMapping("/user/{userId}")
	public ResponseEntity<String> deleteById(@PathVariable Integer userId) {
		boolean deleteUserById = userService.deleteUserById(userId);
		if (deleteUserById)
			return new ResponseEntity<>("User deleted Successfully", HttpStatus.OK);
		else
			return new ResponseEntity<>("User Deletion Failed", HttpStatus.INTERNAL_SERVER_ERROR);
	}

	@GetMapping("/user/{userId}/{status}")
	public ResponseEntity<String> AccStatus(@PathVariable Integer userId, @PathVariable String status) {
		boolean changeStatus = userService.changeStatus(userId, status);
		if (changeStatus)
			return new ResponseEntity<>("Change successful", HttpStatus.OK);
		else
			return new ResponseEntity<>("Change Failed", HttpStatus.INTERNAL_SERVER_ERROR);
	}

	@PostMapping("/login")
	public ResponseEntity<String> Login(@RequestBody Login login) {
		String isLoggedIn = userService.login(login);
		return new ResponseEntity<>(isLoggedIn, HttpStatus.OK);
	}

	
	public ResponseEntity<String> forgotPass(@PathVariable String email){
	String forgotPwd = userService.forgotPwd(email);	
	return new ResponseEntity<>(forgotPwd, HttpStatus.OK);
	}
}
